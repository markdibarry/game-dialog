{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Game Dialog",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#title"
        },
        {
            "include": "#speaker"
        },
        {
            "include": "#tags"
        },
        {
            "include": "#controls"
        },
        {
            "include": "#choices"
        },
        {
            "include": "#functions"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash",
                    "match": "//.*"
                },
                {
                    "name": "comment.block",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "title": {
            "name": "support.function",
            "match": "^\\s*--\\s*\\w+\\s*--\\s*"
        },
        "speaker": {
            "name": "markup.bold",
            "match": "^\\s*(\\w+(?:\\s*,\\s*\\w+)*)\\s*:\\s*"
        },
        "choices": {
            "name": "keyword.control",
            "match": "^\\s*\\?\\s"
        },
        "tags": {
            "name": "keyword.other",
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
                {
                    "include": "#functions"
                },
                {
                    "include": "#variables"
                },
                {
                    "include": "#numerics"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#keywords"
                }
            ]
        },
        "variables": {
            "name": "support.type.property-name",
            "match": "[A-Za-z][A-Za-z0-9_]*"
        },
        "keywords": {
            "name": "keyword.other",
            "match": "true|false"
        },
        "controls": {
            "name": "keyword.control",
            "match": "(?i:if|else if|else)"
        },
        "functions": {
            "match": "(\\w+)(\\()(.*)(\\))",
            "captures": {
                "1": {
                    "name": "keyword.other.unit"
                },
                "3": {
                    "patterns": [
                        {
                            "include": "#functions"
                        },
                        {
                            "include": "#variables"
                        },
                        {
                            "include": "#numerics"
                        },
                        {
                            "include": "#strings"
                        },
                        {
                            "include": "#keywords"
                        }
                    ]
                }
            }
        },
        "strings": {
            "name": "string.quoted.double",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        "numerics": {
            "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])*",
            "captures": {
                "0": {
                    "patterns": [
                        {
                            "begin": "(?=.)",
                            "end": "$",
                            "patterns": [
                                {
                                    "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\w))?$",
                                    "captures": {
                                        "2": {
                                            "name": "constant.numeric.decimal",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                                                    "name": "constant.numeric.other.separator.thousands"
                                                }
                                            ]
                                        },
                                        "3": {
                                            "name": "constant.numeric.other.separator.thousands"
                                        },
                                        "4": {
                                            "name": "constant.numeric.other.separator.decimals"
                                        },
                                        "5": {
                                            "name": "constant.numeric.decimal",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                                                    "name": "constant.numeric.other.separator.thousands"
                                                }
                                            ]
                                        },
                                        "6": {
                                            "name": "constant.numeric.other.separator.thousands"
                                        },
                                        "8": {
                                            "name": "constant.numeric.other.exponent"
                                        },
                                        "9": {
                                            "name": "keyword.operator.arithmetic"
                                        },
                                        "10": {
                                            "name": "keyword.operator.arithmetic"
                                        },
                                        "11": {
                                            "name": "constant.numeric.decimal",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                                                    "name": "constant.numeric.other.separator.thousands"
                                                }
                                            ]
                                        },
                                        "12": {
                                            "name": "constant.numeric.other.suffix"
                                        }
                                    }
                                },
                                {
                                    "match": "(\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$",
                                    "captures": {
                                        "1": {
                                            "name": "constant.numeric.other.preffix.binary"
                                        },
                                        "2": {
                                            "name": "constant.numeric.binary",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                                                    "name": "constant.numeric.other.separator.thousands"
                                                }
                                            ]
                                        },
                                        "3": {
                                            "name": "constant.numeric.other.separator.thousands"
                                        },
                                        "4": {
                                            "name": "constant.numeric.other.suffix"
                                        }
                                    }
                                },
                                {
                                    "match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$",
                                    "captures": {
                                        "1": {
                                            "name": "constant.numeric.other.preffix.hex"
                                        },
                                        "2": {
                                            "name": "constant.numeric.hex",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                                                    "name": "constant.numeric.other.separator.thousands"
                                                }
                                            ]
                                        },
                                        "3": {
                                            "name": "constant.numeric.other.separator.thousands"
                                        },
                                        "4": {
                                            "name": "constant.numeric.other.suffix"
                                        }
                                    }
                                },
                                {
                                    "match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$",
                                    "captures": {
                                        "2": {
                                            "name": "constant.numeric.decimal",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                                                    "name": "constant.numeric.other.separator.thousands"
                                                }
                                            ]
                                        },
                                        "3": {
                                            "name": "constant.numeric.other.separator.thousands"
                                        },
                                        "5": {
                                            "name": "constant.numeric.other.exponent"
                                        },
                                        "6": {
                                            "name": "keyword.operator.arithmetic"
                                        },
                                        "7": {
                                            "name": "keyword.operator.arithmetic"
                                        },
                                        "8": {
                                            "name": "constant.numeric.decimal",
                                            "patterns": [
                                                {
                                                    "match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
                                                    "name": "constant.numeric.other.separator.thousands"
                                                }
                                            ]
                                        },
                                        "9": {
                                            "name": "constant.numeric.other.suffix"
                                        }
                                    }
                                },
                                {
                                    "match": "(?:(?:[0-9a-zA-Z_\\.]|_)|(?<=[eE])[+-])+",
                                    "name": "invalid.illegal.constant.numeric"
                                }
                            ]
                        }
                    ]
                }
            }
        }
    },
    "scopeName": "source.gamedialog"
}
